Arrays are fundamental data structures used to store collections of items, such as numbers, strings, or objects.
In many programming languages, arrays are an essential part of data manipulation. Here, I'll provide a general introduction to arrays and how to work with them in Python.

Arrays in Python:

In Python, you typically work with lists, which are similar to arrays. Lists can store elements of different types, making them versatile.
Here's how to create, manipulate, and work with arrays in Python (using lists):



################################## Here are the list of methods used in python ##########################################


append(x): Adds an element x to the end of the list.

extend(iterable): Appends the elements of an iterable (e.g., a list or tuple) to the list.

insert(i, x): Inserts element x at the specified index i.

remove(x): Removes the first occurrence of element x from the list.

pop([i]): Removes and returns the element at index i. If i is not provided, it removes and returns the last element.

index(x): Returns the index of the first occurrence of element x.

count(x): Returns the number of occurrences of element x in the list.

sort(key=None, reverse=False): Sorts the list in ascending order. You can use the key function for custom sorting.

reverse(): Reverses the order of elements in the list.

copy(): Returns a shallow copy of the list.

clear(): Removes all elements from the list.

len(): Returns the number of elements in the list.

max(): Returns the maximum element in the list.

min(): Returns the minimum element in the list.

sum(): Returns the sum of all elements in the list.

index(x, start, end): Returns the index of the first occurrence of element x within the specified slice.

sort(reverse=True): Sorts the list in descending order.

copy(): Returns a shallow copy of the list.

clear(): Removes all elements from the list.



########################################### Here are the built-in functions used in python ###########################################



len(iterable): Returns the number of items in an iterable, such as a list.

sorted(iterable, key=None, reverse=False): Returns a new list with the elements of the iterable sorted in ascending order. You can use the key function for custom sorting.

sum(iterable, start=0): Calculates the sum of all elements in an iterable.

min(iterable): Returns the minimum value in an iterable.

max(iterable): Returns the maximum value in an iterable.

any(iterable): Returns True if at least one element in the iterable evaluates to True, otherwise, it returns False.

all(iterable): Returns True if all elements in the iterable evaluate to True, otherwise, it returns False.

enumerate(iterable, start=0): Returns an enumerate object that pairs each element in the iterable with its index. It's often used in for loops to access both the index and the element.

filter(function, iterable): Filters elements from the iterable based on the condition specified by the function.

map(function, iterable): Applies the function to each element in the iterable and returns a new iterable containing the results.

zip(iterable1, iterable2, ...): Combines multiple iterables element-wise into a list of tuples.

reversed(iterable): Returns a reverse iterator that allows you to traverse the elements of the iterable in reverse order.

list(iterable): Converts an iterable (e.g., a tuple, string, or another iterable) into a list.

join(iterable): Joins a list of strings into a single string using a specified separator.

count(value): Counts the number of occurrences of a value in a list.

extend(iterable): Appends elements from another iterable (e.g., a list) to the end of a list.

index(x): Returns the index of the first occurrence of element x in the list.

insert(i, x): Inserts element x at the specified index i.

remove(x): Removes the first occurrence of element x from the list.

pop([i]): Removes and returns the element at index i. If i is not provided, it removes and returns the last element.
